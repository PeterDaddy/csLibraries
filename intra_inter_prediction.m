classdef intra_inter_prediction
   methods (Static)
       function candidate_value = intra_prediction(a, b, c, i, j)
            intra_prediction_obj = intra_prediction_9_modes;
            if(i == 1 && j == 1) %___No prediction for the first block as always
                lt = 0;
                for candidate_indexing    = 1:2*c
                    t(candidate_indexing) = 0;
                    l(candidate_indexing) = 0;
                end
                candidate_value = zeros([c c]);
                %disp('First block')
            else
                if(((i-1)~=0)&&(j-1)~=0) %___Passes the first block___
                    lt = b{i-1,j-1}(c,4);
                else
                    lt = 0;
                end
                
                if(((i-1)<=0))
                    t  = [0 ...
                          0 ...
                          0 ...
                          0 ...
                          0 ...
                          0 ...
                          0 ...
                          0];
                elseif(((i-1)>0) && ((j+1)<=size(b,2)))
                    t  = [b{i-1,j}(c,1) ...
                          b{i-1,j}(c,2) ...
                          b{i-1,j}(c,3) ...
                          b{i-1,j}(c,4) ...
                          b{i-1,j+1}(c,1) ...
                          b{i-1,j+1}(c,2) ...
                          b{i-1,j+1}(c,3) ...
                          b{i-1,j+1}(c,4)];
                else
                    t  = [b{i-1,j}(c,1) ...
                          b{i-1,j}(c,2) ...
                          b{i-1,j}(c,3) ...
                          b{i-1,j}(c,4) ...
                          0 ...
                          0 ...
                          0 ...
                          0];
                end
                
                if(((j-1)<=0))
                    l  = [0 ...
                          0 ...
                          0 ...
                          0 ...
                          0 ...
                          0 ...
                          0 ...
                          0];
                elseif(((i+1)<=size(b,1)) && ((j-1)>0))
                    l  = [b{i,j-1}(1,c) ...
                          b{i,j-1}(2,c) ...
                          b{i,j-1}(3,c) ...
                          b{i,j-1}(4,c) ...
                          b{i+1,j-1}(1,c) ...
                          b{i+1,j-1}(2,c) ...
                          b{i+1,j-1}(3,c) ...
                          b{i+1,j-1}(4,c)];
                else
                    l  = [b{i,j-1}(1,c) ...
                          b{i,j-1}(2,c) ...
                          b{i,j-1}(3,c) ...
                          b{i,j-1}(4,c) ...
                          0 ...
                          0 ...
                          0 ...
                          0];
                end
               
               candidate_value = intra_prediction_obj.sum_of_absolute_difference(intra_prediction_obj.vertical_replication(t,c), ...
                                                                                 intra_prediction_obj.horizonatal_replication(l,c), ...
                                                                                 intra_prediction_obj.mean_dc(l,t,c), ...
                                                                                 intra_prediction_obj.diagonal_down_left(t), ...
                                                                                 intra_prediction_obj.diagonal_down_right(l,t,lt), ...
                                                                                 intra_prediction_obj.vertical_right(l,t,lt), ...
                                                                                 intra_prediction_obj.horizontal_down(l,t,lt), ...
                                                                                 intra_prediction_obj.vertical_left(t), ...
                                                                                 intra_prediction_obj.horizontal_up(l), ...
                                                                                 a{i,j});

            end
       end
       
       function candidate_value = inter_prediction(a, b, c, i, j)
           % Overlapping searching
           % a -> original
           % b -> previous frame
           % c -> search_area. ex = 4
           % i -> x
           % j -> y
           cell2mat_b = cell2mat(b);
           if((i==1) || (i==(size(a,1)) || (j==1) || (j==(size(a,2))))) 
               %___Stop working at bouandary zone___
               candidate_value = cell2mat_b(i:i+c-1, j:j+c-1);%___Then equal to coordinate___
           else
               for ii = 1:(c*2)
                   for jj = 1:(c*2)
                       mag_search(ii,jj) = sum(sum(abs(a{i,j}-cell2mat_b(ii:ii+c-1, jj:jj+c-1))));
                   end
               end
               [pos_i, pos_j]  = find(min(mag_search(mag_search > 0)) == mag_search(:,:));
               candidate_value = cell2mat_b(pos_i:pos_i+c-1, pos_j:pos_j+c-1);
           end
       end
   end
end